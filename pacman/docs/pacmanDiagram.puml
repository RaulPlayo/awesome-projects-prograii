@startuml
package game {
  class Game {
    - maze: Maze
    - pacman: Pacman
    - ghosts: List<Ghost>
    - isRunning: boolean
    - score: int
    - foodCount: int
    - pacmanTimer: Timer
    - ghostTimer: Timer
    - lives: int
    - stopPacmanMovement(): void
    - stopGhostMovement(): void
    - stopGhostMovement(): void
    - checkCollision(): void
    - loseLife(): void
    - createMaze(): void
    + Game()
    + getLive: int
    + getGhosts(): List<Ghost>
    + start(): void
    + stop(): void
    + restart(): void
    + handleKeyPress(): void
    + startAutomaticMovement(): void
    + startGhostMovement(): void
    + update(): void
    + getMaze(): Maze
    + getPacman(): Pacman
    + isRunning(): boolean
    + getScore(): int
    + setScore(): void
  }
  class PacmanGame {
  - game(): Game
  - renderer(): Renderer
  + PacmanGame()
  + main(): void
  }
  class Maze {
    - width: int
    - height: int
    - cells: Cell[][]
    + Maze():
    + getWidth(): int
    + getHeight(): int
    + getCell(): Cell
    + updateCell(): void
    + getFoodCount(): int
  }
  abstract class Cell implements GameElement {
    - position: Position
    - type: CellType
    + getX(): int
    + getY(): int
    + Cell(): CellType
    + getPosition(): Position
    + isWall(): boolean
    + isFood(): boolean
    + isPower(): boolean
    + isEmpty(): boolean
  }
  abstract class GameCharacter implements GameElement {
    - position: Position
    - direction: Direction
    + GameCharacter()
    + getX(): int
    + getY(): int
    + getPosition(): Position
    + setPosition(): void
    + getDirection(): Direction
    + setDirection(): void
    + move(): Position
    + die(): void
  }
  class Position {
  - y: int
  - x: int
  + get(): int[]
  + set(): void
  + getX(): int
  + setX(): void
  + getY(): int
  + setY(): void
  + getXWithOffset(): int
  + isEqual(): boolean
  }
  class Pacman {
    + eatDot(): void
    + eatPowerPellet(): void
    + die(): void
    + getNextPosition(): Position
  }
  class Ghost {
    - isWallOrGhostInDirection(): boolean
    - getNextPosition(): Position
    - isWall(): boolean
    - isGhost(): boolean
    - getAlternativeDirections(): List<Direction>
    + Ghost()
    + chasePacman(): Position
    + die(): void
  }
  enum Direction {
    UP
    DOWN
    LEFT
    RIGHT
  }
    enum CellType {
    EMPTY
    FOOD
    WALL
    POWER
  }
  interface GameElement {
    + getX(): int
    + getY(): int
  }
  GameCharacter <|-- Pacman
  GameCharacter <|-- Ghost
  Game --> Maze
  Game --> Pacman
  Game o--> Ghost
  PacmanGame --> Game
  Cell --> Position
  GameCharacter --> Position
  Ghost --> Position
  Pacman --> Position

}
package renderer {
interface Renderer {
  + renderGame(): void
  + close(): void
  + movePacman(): void
  + moveGhost(): void
  + printWinScreen(): void
}
class ConsoleRenderer{
  - terminal: Terminal
  - screen: Screen
  - keyStroke: KeyStroke
  - game: Game
  - offset: int
  - readUserInput(terminal: Terminal): void
  - printCharacter(pacman: Pacman): void
  - printCharacter(pacman: Pacman, previousPosition: Position): void
  - printCharacter(ghost: Ghost): void
  - printCharacter(ghost: Ghost, previousPosition: Position): void
  - printCell(position: Position): void
  - printFood(position: Position): void
  - printWall(position: Position): void
  - printScore(): void
  - printStartScreen(): void
  - refresh(): void
  - startGame(): void
  + renderGame(game: Game): void
  + printMaze(maze: Maze): void
  + movePacman(previousPosition: Position): void
  + moveGhost(ghost: Ghost, previousPosition: Position): void
  + printWinScreen(): void
  + close(): void
  + makeWindowVisible(terminal: Terminal): void

}
Renderer <|.. ConsoleRenderer
PacmanGame --> Renderer
@enduml